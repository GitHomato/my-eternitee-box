{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Web3 from 'web3';\nimport artifact from '../../contracts/TokenPortal.json';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\nexport default function TokenPortal() {\n  _s();\n\n  const [account, setAccount] = useState('');\n  const [balance, setBalance] = useState(0);\n  const [network, setNetwork] = useState(0);\n  const [contract, setContract] = useState();\n  const [totalHours, setTotalHours] = useState(0);\n  const [allMissions, setAllMissions] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    async function loadAccountAndContract() {\n      // We load the account being connected\n      const accounts = await web3.eth.requestAccounts();\n      const _account = accounts[0];\n      setAccount(_account); // We get the network type\n\n      const network = await web3.eth.net.getNetworkType();\n      setNetwork(network); // We load the balance for the account and format the balance\n\n      const balance = await web3.eth.getBalance(_account);\n      setBalance((balance / 1e18).toFixed(4)); // We connect to the contact\n\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n\n      try {\n        const address = artifact.networks[networkID].address;\n        const contract = new web3.eth.Contract(abi, address);\n        setContract(contract);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    loadAccountAndContract();\n  }, []);\n}\n\n_s(TokenPortal, \"uxU+CYZ2vfugGEn0vOBZulQX7do=\");\n\n_c = TokenPortal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenPortal\");","map":{"version":3,"names":["useEffect","useState","Web3","artifact","web3","givenProvider","TokenPortal","account","setAccount","balance","setBalance","network","setNetwork","contract","setContract","totalHours","setTotalHours","allMissions","setAllMissions","submitting","setSubmitting","name","setName","message","setMessage","loadAccountAndContract","accounts","eth","requestAccounts","_account","net","getNetworkType","getBalance","toFixed","networkID","getId","abi","address","networks","Contract","err","console","error"],"sources":["/Users/tomshnaider/Desktop/my-eternitee-box/client/src/components/Demo/index.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Web3 from 'web3'\nimport artifact from '../../contracts/TokenPortal.json';\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n\n\n\nexport default function TokenPortal() {\n  const [account, setAccount] = useState('')\n  const [balance, setBalance] = useState(0)\n  const [network, setNetwork] = useState(0)\n  const [contract, setContract] = useState()\n  const [totalHours, setTotalHours] = useState(0)\n  const [allMissions, setAllMissions] = useState([])\n  const [submitting, setSubmitting] = useState(false);\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n\n    async function loadAccountAndContract() {\n        // We load the account being connected\n        const accounts = await web3.eth.requestAccounts()\n        const _account = accounts[0]\n        setAccount(_account)\n\n        // We get the network type\n        const network = await web3.eth.net.getNetworkType()\n        setNetwork(network)\n\n        // We load the balance for the account and format the balance\n        const balance = await web3.eth.getBalance(_account)\n        setBalance((balance / 1e18).toFixed(4))\n\n        // We connect to the contact\n        const networkID = await web3.eth.net.getId();\n        const { abi } = artifact;\n        try {\n            const address = artifact.networks[networkID].address\n            const contract = new web3.eth.Contract(abi, address);\n            setContract(contract)\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    loadAccountAndContract()\n\n  }, [])\n}"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AAEA,MAAMC,IAAI,GAAG,IAAIF,IAAJ,CAASA,IAAI,CAACG,aAAL,IAAsB,uBAA/B,CAAb;AAIA,eAAe,SAASC,WAAT,GAAuB;EAAA;;EACpC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,EAAxC;EACA,MAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,CAAD,CAA5C;EACA,MAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,EAAD,CAAtC;EAEAD,SAAS,CAAC,MAAM;IAEd,eAAeyB,sBAAf,GAAwC;MACpC;MACA,MAAMC,QAAQ,GAAG,MAAMtB,IAAI,CAACuB,GAAL,CAASC,eAAT,EAAvB;MACA,MAAMC,QAAQ,GAAGH,QAAQ,CAAC,CAAD,CAAzB;MACAlB,UAAU,CAACqB,QAAD,CAAV,CAJoC,CAMpC;;MACA,MAAMlB,OAAO,GAAG,MAAMP,IAAI,CAACuB,GAAL,CAASG,GAAT,CAAaC,cAAb,EAAtB;MACAnB,UAAU,CAACD,OAAD,CAAV,CARoC,CAUpC;;MACA,MAAMF,OAAO,GAAG,MAAML,IAAI,CAACuB,GAAL,CAASK,UAAT,CAAoBH,QAApB,CAAtB;MACAnB,UAAU,CAAC,CAACD,OAAO,GAAG,IAAX,EAAiBwB,OAAjB,CAAyB,CAAzB,CAAD,CAAV,CAZoC,CAcpC;;MACA,MAAMC,SAAS,GAAG,MAAM9B,IAAI,CAACuB,GAAL,CAASG,GAAT,CAAaK,KAAb,EAAxB;MACA,MAAM;QAAEC;MAAF,IAAUjC,QAAhB;;MACA,IAAI;QACA,MAAMkC,OAAO,GAAGlC,QAAQ,CAACmC,QAAT,CAAkBJ,SAAlB,EAA6BG,OAA7C;QACA,MAAMxB,QAAQ,GAAG,IAAIT,IAAI,CAACuB,GAAL,CAASY,QAAb,CAAsBH,GAAtB,EAA2BC,OAA3B,CAAjB;QACAvB,WAAW,CAACD,QAAD,CAAX;MACH,CAJD,CAIE,OAAO2B,GAAP,EAAY;QACVC,OAAO,CAACC,KAAR,CAAcF,GAAd;MACH;IACJ;;IAEDf,sBAAsB;EAEvB,CA9BQ,EA8BN,EA9BM,CAAT;AA+BD;;GA1CuBnB,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}